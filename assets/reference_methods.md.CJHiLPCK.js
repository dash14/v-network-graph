import{_ as e}from"./chunks/plugin-vue_export-helper.DlAUqK2U.js";import{c as o,a3 as n,o as r}from"./chunks/ui.7FRgKvz5.js";const u=JSON.parse('{"title":"Methods","description":"","frontmatter":{},"headers":[],"relativePath":"reference/methods.md","filePath":"reference/methods.md"}'),d={name:"reference/methods.md"};function i(a,t,s,p,c,m){return r(),o("div",null,t[0]||(t[0]=[n('<h1 id="methods" tabindex="-1">Methods <a class="header-anchor" href="#methods" aria-label="Permalink to &quot;Methods&quot;">​</a></h1><h2 id="instance-methods" tabindex="-1">Instance Methods <a class="header-anchor" href="#instance-methods" aria-label="Permalink to &quot;Instance Methods&quot;">​</a></h2><p>Instance methods of <code>&lt;v-network-graph&gt;</code> component shown below.</p><div class="reference-table"><table class="instance-methods"><thead><tr><th>Method</th><th>Description</th></tr></thead><tbody><tr><td>fitToContents(options?: FitOptions): void</td><td> Perform zooming/panning according to the graph size.<br> FitOptions: <code>{ margin?: FitContentMargin }</code><br> FitContentMargin: <pre class="code">number | &quot;${number}%&quot; | &quot;${number}px&quot;\n| {\n    top?:    number | `${number}%` | `${number}px`,\n    left?:   number | `${number}%` | `${number}px`,\n    right?:  number | `${number}%` | `${number}px`,\n    bottom?: number | `${number}%` | `${number}px`\n  }</pre> If margin is not specified, the <code>configs.view.fitContentMargin</code> configuration will be used. (default: &quot;8%&quot;) </td></tr><tr><td>exportAsSvgText(options: ExportOptions): Promise&lt;string&gt;</td><td> Export the network-graph contents as SVG text data.<br> ExportOptions: <code>{ embedImages?: boolean }</code></td></tr><tr><td>exportAsSvgElement(options: ExportOptions): Promise&lt;SVGElement&gt;</td><td> Export the network-graph contents as cloned SVG element data.<br> ExportOptions: <code>{ embedImages?: boolean }</code></td></tr><tr><td><em>[Deprecated]</em><br>getAsSvg(): string</td><td><em>[Deprecated]</em><br>Get the network-graph contents as SVG text data.</td></tr><tr><td>getPan(): {x, y}</td><td>Get the pan vector.</td></tr><tr><td>getSizes(): Sizes</td><td> Get all calculate svg dimensions. <br> Sizes: <code>{width, height, viewBox:{x, y, width, height}}</code></td></tr><tr><td>panTo(point: {x, y}): void</td><td>Pan to a rendered position.</td></tr><tr><td>panBy(point: {x, y}): void</td><td>Relatively pan the graph by a specified rendered position vector.</td></tr><tr><td>panToCenter(): void</td><td>Perform a pan to center the contents of the network graph.</td></tr><tr><td>startBoxSelection(options: BoxSelectionOption): void</td><td> Start the box-selection mode to select nodes within the dragged rectangle range. <br> BoxSelectionOption: <pre class="code">{\n  stop?: &quot;pointerup&quot; | &quot;click&quot; | &quot;manual&quot;\n  type?: &quot;append&quot; | &quot;invert&quot;\n  withShiftKey?: &quot;append&quot; | &quot;invert&quot; | &quot;same&quot;\n}</pre><ul><li>stop: Trigger to stop mode (default: &quot;pointerup&quot;)</li><li>type: Selection type (default: &quot;append&quot;)</li><li> withShiftKey: Selection type if shift key pressed at drag start (default: &quot;same&quot;) </li></ul></td></tr><tr><td>stopBoxSelection(): void</td><td>Stop the box-selection mode.</td></tr><tr><td>translateFromDomToSvgCoordinates(point: {x, y}): {x, y}</td><td>Translate from DOM to SVG coordinates.</td></tr><tr><td>translateFromSvgToDomCoordinates(point: {x, y}): {x, y}</td><td>Translate from SVG to DOM coordinates.</td></tr><tr><td>zoomIn(): void</td><td>Perform zoom-in.</td></tr><tr><td>zoomOut(): void</td><td>Perform zoom-out.</td></tr><tr><td>getViewBox(): Box</td><td> Get the coordinates of the area being displayed.<br> Box: <code>{ top: number, bottom: number, left: number, right: number }</code></td></tr><tr><td>setViewBox(box: Box): void</td><td>Set the coordinates of the area being displayed.</td></tr><tr><td> transitionWhile(func: () =&gt; void | Promise&lt;void&gt;, duration: number = 300, timingFunction: string = &quot;linear&quot;): void </td><td> When the position of a node changes within the function specified by the argument, a transition animation is triggered.<br><code>duration</code> in milliseconds. </td></tr></tbody></table></div>',4)]))}const g=e(d,[["render",i]]);export{u as __pageData,g as default};
