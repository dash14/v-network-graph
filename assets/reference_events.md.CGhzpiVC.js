import{_ as e}from"./chunks/plugin-vue_export-helper.DlAUqK2U.js";import{c as d,a3 as o,o as n}from"./chunks/ui.7FRgKvz5.js";const p=JSON.parse('{"title":"Events","description":"","frontmatter":{},"headers":[],"relativePath":"reference/events.md","filePath":"reference/events.md"}'),r={name:"reference/events.md"};function c(u,t,a,i,l,s){return n(),d("div",null,t[0]||(t[0]=[o('<h1 id="events" tabindex="-1">Events <a class="header-anchor" href="#events" aria-label="Permalink to &quot;Events&quot;">​</a></h1><h2 id="events-vue-component" tabindex="-1">Events (Vue component) <a class="header-anchor" href="#events-vue-component" aria-label="Permalink to &quot;Events (Vue component)&quot;">​</a></h2><div class="reference-table"><table tabindex="0"><thead><tr><th>Event</th><th>Description</th></tr></thead><tbody><tr><td>update:zoomLevel</td><td>update zoom level</td></tr><tr><td>update:selectedNodes</td><td>update selected nodes</td></tr><tr><td>update:selectedEdges</td><td>update selected edges</td></tr><tr><td>update:selectedPaths</td><td>update selected paths</td></tr><tr><td>update:layouts</td><td>update layouts</td></tr></tbody></table></div><h2 id="events-with-event-handlers" tabindex="-1">Events (with event-handlers) <a class="header-anchor" href="#events-with-event-handlers" aria-label="Permalink to &quot;Events (with event-handlers)&quot;">​</a></h2><p>The following is a list of events that can be specified for <code>event-handlers</code> prop.</p><div class="reference-table"><table><thead><tr><th>Event type</th><th>Description</th><th>Event value</th></tr></thead><tbody><tr><td>&quot;view:load&quot;</td><td>component loaded</td><td><code>undefined</code></td></tr><tr><td>&quot;view:unload&quot;</td><td>mouse mode changed</td><td><code>undefined</code></td></tr><tr><td>&quot;view:mode&quot;</td><td>component unloaded</td><td><code>&quot;default&quot;</code> / <code>&quot;node&quot;</code> / <code>&quot;edge&quot;</code></td></tr><tr><td>&quot;view:click&quot;</td><td>background clicked</td><td rowspan="2"><code>{ event: MouseEvent }</code><br> When a double click occurs, the &quot;view:click&quot; event is fired twice. If you want to determine the second click that is judged to be a double click, you can use the value of <code>event.detail`</code>. (When it is a double click, the value will be 2.)<br><br> By default, double-clicking the background will zoom it. To disable this behavior, set <code>view.doubleClickZoomEnabled&quot;</code> to <code>false</code> in Configuration. </td></tr><tr><td>&quot;view:dblclick&quot;</td><td>background double clicked</td></tr><tr><td>&quot;view:zoom&quot;</td><td>zoom level changed</td><td><code>number</code> (new zoom level)</td></tr><tr><td>&quot;view:pan&quot;</td><td>panned</td><td><code>{ x: number, y: number }</code></td></tr><tr><td>&quot;view:fit&quot;</td><td>fitted</td><td><code>undefined</code></td></tr><tr><td>&quot;view:resize&quot;</td><td>container resized</td><td><code>{ x: number, y: number, width: number, height: number }</code></td></tr><tr><td>&quot;view:contextmenu&quot;</td><td>background right-clicked</td><td><code>{ event: MouseEvent }</code><br> (To disable the browser&#39;s standard context menu, you have to call <code>event.preventDefault()</code> in the handler.) </td></tr><tr><td>&quot;node:click&quot;</td><td>node clicked</td><td rowspan="2"><code>{ node: string, event: MouseEvent }</code><br> When a double click occurs, the &quot;node:click&quot; event is fired twice. If you want to determine the second click that is judged to be a double click, you can use the value of <code>event.detail`</code>. (When it is a double click, the value will be 2.) </td></tr><tr><td>&quot;node:dblclick&quot;</td><td>node double clicked</td></tr><tr><td>&quot;node:pointerover&quot;</td><td>pointer over on node</td><td rowspan="4"><code>{ node: string, event: PointerEvent }</code></td></tr><tr><td>&quot;node:pointerout&quot;</td><td>pointer out on node</td></tr><tr><td>&quot;node:pointerdown&quot;</td><td>pointer down on node</td></tr><tr><td>&quot;node:pointerup&quot;</td><td>pointer up on node</td></tr><tr><td>&quot;node:contextmenu&quot;</td><td>node right-clicked</td><td><code>{ node: string, event: MouseEvent }</code><br> (To disable the browser&#39;s standard context menu, you have to call <code>event.preventDefault()</code> in the handler.) </td></tr><tr><td>&quot;node:dragstart&quot;</td><td>node drag started</td><td><code>{ NODE_ID: { x: number; y: number }, ... }</code></td></tr><tr><td>&quot;node:pointermove&quot;</td><td>pointer move on node</td><td><code>{ node: string, event: PointerEvent }</code></td></tr><tr><td>&quot;node:dragend&quot;</td><td>node drag ended</td><td><code>{ NODE_ID: { x: number; y: number }, ... }</code></td></tr><tr><td>&quot;node:select&quot;</td><td>node selected</td><td><code>[ NODE_ID, ...]</code></td></tr><tr><td>&quot;edge:click&quot;</td><td>edge clicked</td><td rowspan="2"> not summarized edge:<br><code>{ edge: EDGE_ID, edges: [EDGE_ID], event: MouseEvent, summarized: false }</code><br><br> summarized edge:<br><code>{ edges: [EDGE_ID, ...], event: MouseEvent, summarized: true }</code><br><br> When a double click occurs, the &quot;edge:click&quot; event is fired twice. If you want to determine the second click that is judged to be a double click, you can use the value of <code>event.detail`</code>. (When it is a double click, the value will be 2.) </td></tr><tr><td>&quot;edge:dblclick&quot;</td><td>edge double clicked</td></tr><tr><td>&quot;edge:pointerover&quot;</td><td>pointer over on edge</td><td rowspan="4"> not summarized edge:<br><code>{ edge: EDGE_ID, edges: [EDGE_ID], event: PointerEvent, summarized: false }</code><br><br> summarized edge:<br><code>{ edges: [EDGE_ID, ...], event: PointerEvent, summarized: true }</code></td></tr><tr><td>&quot;edge:pointerout&quot;</td><td>pointer out on edge</td></tr><tr><td>&quot;edge:pointerdown&quot;</td><td>pointer down on edge</td></tr><tr><td>&quot;edge:pointerup&quot;</td><td>pointer up on edge</td></tr><tr><td>&quot;edge:contextmenu&quot;</td><td>edge right-clicked</td><td> not summarized edge:<br><code>{ edge: EDGE_ID, edges: [EDGE_ID], event: MouseEvent, summarized: false }</code><br><br> summarized edge:<br><code>{ edges: [EDGE_ID, ...], event: MouseEvent, summarized: true }</code></td></tr><tr><td>&quot;edge:select&quot;</td><td>edge selected</td><td><code>[ EDGE_ID, ... ]</code></td></tr><tr><td>&quot;path:click&quot;</td><td>path clicked</td><td rowspan="2"><code>{ path: Path, event: MouseEvent }</code><br> When a double click occurs, the &quot;path:click&quot; event is fired twice. If you want to determine the second click that is judged to be a double click, you can use the value of <code>event.detail`</code>. </td></tr><tr><td>&quot;path:dblclick&quot;</td><td>path double clicked</td></tr><tr><td>&quot;path:pointerover&quot;</td><td>pointer over on path</td><td rowspan="4"><code>{ path: PATH_ID, event: PointerEvent }</code></td></tr><tr><td>&quot;path:pointerout&quot;</td><td>pointer out on path</td></tr><tr><td>&quot;path:pointerdown&quot;</td><td>pointer down on path</td></tr><tr><td>&quot;path:pointerup&quot;</td><td>pointer up on path</td></tr><tr><td>&quot;path:contextmenu&quot;</td><td>path right-clicked</td><td><code>{ path: Path, event: MouseEvent }</code></td></tr><tr><td>&quot;path:select&quot;</td><td>path selected</td><td><code>[ PATH_ID, ... ]</code></td></tr></tbody></table></div>',6)]))}const q=e(r,[["render",c]]);export{p as __pageData,q as default};
